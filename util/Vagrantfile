# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.require_version ">= 2.2.14"

# Install vagrant-disksize to allow resizing the vagrant box disk.
unless Vagrant.has_plugin?("vagrant-disksize")
  raise  Vagrant::Errors::VagrantError.new, "vagrant-disksize plugin is missing. Please install it using 'vagrant plugin install vagrant-disksize' and rerun 'vagrant up'"
end

MEM_RATIO = 0.50
CPUS = 4
CPU_EXEC_CAP = 100
VM_NAME = "developer"
DISK_SIZE = '450GB'

Vagrant.configure("2") do |config|
  require 'time'

  # VM type
  config.vm.box = "ubuntu/focal64"

  # Host name
  config.vm.hostname = VM_NAME

  # Set disc size
  config.disksize.size = DISK_SIZE

  # X11 forwarding over ssh
  config.ssh.forward_x11 = true
  
  # Network port forwarding
  config.vm.network "forwarded_port", guest: 8501, host: 8501

  # Message
  up_message = <<-MSG

    Vscode
    * Run 'vagrant ssh-config >> ~/.ssh/config'

    Login
    * Run 'vagrant ssh' to login to the machine
    * Run 'source ~/.bashrc' inside the machine
    
    GCP
    * Run 'gcloud auth login `account` --no-launch-browser'
    * Run 'gcloud auth application-default login' --no-launch-browser

    Kubectl
    * Run 'gcloud container clusters get-credentials `cluster name`'

    Pyenv
    * pyenv update
    * pyenv install 3.10.0
    * pyenv install 3.9.6
    * pyenv virtualenv 3.9.6 causalml-3.9

    Github
    * sudo chmod 600 ~/.ssh/id_rsa
    * sudo chmod 600 ~/.ssh/id_rsa.pub

  MSG
  config.vm.post_up_message = up_message
  
  # Mount
  config.vm.synced_folder ".", "/vagrant", disabled: true
  config.vm.synced_folder "../..", "/development"

  config.vm.provider "virtualbox" do |vb|

    # Not display the VirtualBox GUI when booting the machine
    vb.gui = false

    # Virtualbox name
    vb.name = VM_NAME

  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = false

    vb.name = VM_NAME
 
    # Customize the amount of memory on the VM:
    host = RbConfig::CONFIG['host_os']
    
    if host =~ /darwin/ # mac host
      # sysctl returns Bytes and we need to convert to MB
      mem = `sysctl -n hw.memsize`.to_i / 1024^2 * MEM_RATIO
    elsif host =~ /linux/ # linux host
      # meminfo shows KB and we need to convert to MB
      mem = `grep 'MemTotal' /proc/meminfo | sed -e 's/MemTotal://' -e 's/ kB//'`.to_i / 1024 * MEM_RATIO
    else # windows host
      mem = (`wmic OS get TotalVisibleMemorySize`.split("\n")[2].to_i / 1024 * MEM_RATIO).round
    end
    
    # Customize amount of memeory and cpu
    vb.customize ["modifyvm", :id, "--memory", mem, "--cpus", CPUS, "--ioapic", "on", "--cpuexecutioncap", CPU_EXEC_CAP]
  end

  # Fix potential issues with timezones and system clock
  offset = ((Time.zone_offset(Time.now.zone) / 60) / 60)
  timezone_suffix = offset >= 0 ? "-#{offset.to_s}" : "+#{offset.to_s}"
  timezone = 'Etc/GMT' + timezone_suffix
  config.vm.provision :shell, :inline => "sudo rm /etc/localtime && sudo ln -s /usr/share/zoneinfo/" + timezone + " /etc/localtime", run: "always"

  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL

    sudo apt-get install -y software-properties-common && \
      sudo apt-get -y install dos2unix && \
      sudo apt-get -y update && \
      sudo timedatectl set-ntp no && \
      sudo apt-get -y install ntp && \
      sudo apt-get -y install wget && \
      sudo apt-get -y install openssl && \
      sudo apt-get -y install curl build-essential make gcc && \
      sudo apt-get -y install gfortran libopenblas-dev liblapack-dev && \
      sudo apt-get -y install graphviz libgraphviz-dev graphviz-dev pkg-config

    # Rust
    curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh -s -- -y

    # Python
    sudo apt-get -y install python-is-python3 python3-pip
    sudo add-apt-repository ppa:deadsnakes/ppa -y
    sudo apt-get -y install gcc python3-dev python3-setuptools

    # Pyenv
    sudo apt-get install -y libssl-dev zlib1g-dev libbz2-dev
    sudo apt-get install -y libreadline-dev libsqlite3-dev llvm libncurses5-dev libncursesw5-dev
    sudo apt-get install -y xz-utils tk-dev libffi-dev liblzma-dev python-openssl
    curl https://pyenv.run | bash

    # Bazel
    sudo apt-get -y install pkg-config zip g++ zlib1g-dev unzip
    sudo apt -y install gnupg
    curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor > bazel.gpg
    sudo mv bazel.gpg /etc/apt/trusted.gpg.d/
    echo "deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list
    
    sudo apt update && sudo apt -y install bazel
    sudo apt update && sudo apt -y full-upgrade

    # Ansible
    sudo apt-add-repository -y ppa:ansible/ansible  && \
      sudo apt-get update  && \
      sudo apt-get -y install ntp ansible

    # Docker
    sudo apt-get remove docker docker-engine docker.io containerd runc
    sudo apt-get install -y \
      ca-certificates \
      curl \
      gnupg \
      lsb-release
    sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
      $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt-get update
    sudo apt-get install docker-ce docker-ce-cli containerd.io
    sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
    sudo docker run hello-world

    # Kubectl
    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

    # Kustomize
    curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
    sudo install -o root -g root -m 0755 kustomize /usr/local/bin/kustomize

    # Cloud SDK
    sudo echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
    sudo curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
    sudo apt-get update
    sudo apt-get -y install google-cloud-sdk 
    sudo apt-get -y install google-cloud-sdk-app-engine-python google-cloud-sdk-app-engine-python-extras google-cloud-sdk-app-engine-java
    sudo apt-get -y install google-cloud-sdk-bigtable-emulator google-cloud-sdk-cbt google-cloud-sdk-cloud-build-local
    sudo apt-get -y install google-cloud-sdk-datalab google-cloud-sdk-datastore-emulator google-cloud-sdk-firestore-emulator google-cloud-sdk-pubsub-emulator
    sudo apt-get -y install google-cloud-sdk-skaffold
    sudo apt-get -y install google-cloud-sdk-kpt google-cloud-sdk google-cloud-sdk

    # R
    sudo apt-get -y install libgsl-dev
    sudo apt-get -y install libxml2-dev
    sudo apt-get -y install libcurl4-openssl-dev
    sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9
    sudo add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/'
    sudo apt -y install r-base
    sudo R -e 'if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")'
    sudo R -e 'BiocManager::install(c("magrittr", "pkgconfig", "igraph"), force = TRUE)'
    sudo R -e 'BiocManager::install(c("graph", "RBGL", "ggm"))'
    sudo R -e 'install.packages(c("Rcpp", "abind", "corpcor", "DEoptimR", "robustbase", "bdsmatrix", "sfsmisc", "RSpectra", "kernlab"))'
    sudo R -e 'install.packages(c("tidyverse", "fastICA", "bnlearn", "kpcalg", "pcalg", "CausalImpact"))'
    sudo R -e 'install.packages(c("devtools"))'
    sudo R -e 'library(devtools); install_github("Diviyan-Kalainathan/RCIT")'

    # Go
    sudo apt -y install golang

    # kpt
    go install -v github.com/GoogleContainerTools/kpt

    # Kustomize
    GOBIN=$(pwd)/ GO111MODULE=on go get sigs.k8s.io/kustomize/kustomize/v3

    # SQL
    sudo apt-get -y install mysql-client postgresql-client-common postgresql-client
    sudo wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O /usr/local/bin/cloud_sql_proxy
    sudo chmod o+x /usr/local/bin/cloud_sql_proxy

    # git lfs
    sudo curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
    sudo apt-get install git-lfs
    sudo git lfs install

    # Clean
    sudo apt-get -y upgrade
    sudo apt-get -y clean

    if  [[ -f "/development/base/dotfiles/.bashrc-shared-settings" ]] && ! sudo grep -q "source /development/base/dotfiles/.bashrc-shared-settings" ~/.bashrc ; then
      sudo echo "source /development/base/dotfiles/.bashrc-shared-settings" >> ~/.bashrc
      dos2unix /development/base/dotfiles/.bashrc-shared-settings
    fi

    psql --version
    mysql --version
    R --version
    gcloud --version
    docker --version
    docker-compose --version
    ansible --version
    bazel --version
    rustc --version
    cargo --version
    python --version
    pyenv --version
    kubectl version --client
    go version
    kpt version
    kustomize version
    git --version


    SHELL
    end
  
end