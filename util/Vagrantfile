# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  require 'time'

  # VM type
  config.vm.box = "ubuntu/xenial64"

  # Host name
  config.vm.hostname = "vagrant"

  # Set disc size
  config.disksize.size = '450GB'

  # X11 forwarding over ssh
  config.ssh.forward_x11 = true
  
  # Network port forwarding
  config.vm.network "forwarded_port", guest: 8501, host: 8501

  # Message
  config.vm.post_up_message = "Run 'vagrant ssh' to login to the machine."

  # Mount
  config.vm.synced_folder ".", "/vagrant", disabled: true
  config.vm.synced_folder "../..", "/RUDOLF"

  config.vm.synced_folder ENV['HOME'] + "/.kaggle", "/home/ubuntu/.kaggle", mount_options: ['dmode=700,fmode=600']
  config.vm.synced_folder ENV['HOME'] + "/.secrets", "/home/ubuntu/.secrets", mount_options: ['dmode=700,fmode=600']

  config.vm.provider "virtualbox" do |vb|

    # Not display the VirtualBox GUI when booting the machine
    vb.gui = false

    # Virtualbox name
    vb.name = "developer-box"

    # Give VM 75% system memory & access to all cpu cores on the host with an execution cap of 85%
    mem_ratio = 0.75
    cpu_exec_cap = 85
    host = RbConfig::CONFIG['host_os']
    
    if host =~ /darwin/

      cpus = `sysctl -n hw.ncpu`.to_i

      # sysctl returns Bytes and we need to convert to MB
      mem = `sysctl -n hw.memsize`.to_i / 1024^2 * mem_ratio

    elsif host =~ /linux/

      cpus = `nproc`.to_i

      # meminfo shows KB and we need to convert to MB
      mem = `grep 'MemTotal' /proc/meminfo | sed -e 's/MemTotal://' -e 's/ kB//'`.to_i / 1024 * mem_ratio

    else # Windows folks

      cpus = `wmic cpu get NumberOfCores`.split("\n")[2].to_i
      mem = (`wmic OS get TotalVisibleMemorySize`.split("\n")[2].to_i / 1024 * mem_ratio).round

    end

    puts "Provisioning VM with host #{host} and #{cpus} CPU's (at #{cpu_exec_cap}%) and #{mem/1024} GB RAM."
    
    # Customize amount of memeory and cpu
    #vb.customize ["modifyvm", :id, "--memory", "36000", "--cpus", "4", "--ioapic", "on", "--cpuexecutioncap", "100"]
    vb.customize ["modifyvm", :id, "--memory", mem, "--cpus", cpus, "--ioapic", "on", "--cpuexecutioncap", cpu_exec_cap]
    #vb.customize ["modifyvm", :id, "--memory", mem]
    #vb.customize ["modifyvm", :id, "--cpus", cpus]
    #vb.customize ["modifyvm", :id, "--cpuexecutioncap", cpu_exec_cap]

  end

  # Fix potential issues with timezones and system clock
  offset = ((Time.zone_offset(Time.now.zone) / 60) / 60)
  timezone_suffix = offset >= 0 ? "-#{offset.to_s}" : "+#{offset.to_s}"
  timezone = 'Etc/GMT' + timezone_suffix
  config.vm.provision :shell, :inline => "sudo rm /etc/localtime && sudo ln -s /usr/share/zoneinfo/" + timezone + " /etc/localtime", run: "always"

  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL

    sudo apt-get install -y software-properties-common && \
      sudo apt-get install dos2unix && \
      # sudo add-apt-repository ppa:deadsnakes/ppa && \
      sudo apt-get update && \
      sudo timedatectl set-ntp no && \
      sudo apt-get install ntp && \
      sudo apt-get install wget && \
      sudo apt-get install openssl && \
      sudo apt-get install imagemagick && \
      # sudo apt-get install python-apt && \
      sudo apt-get install postgresql-client-common && \
      sudo apt-get install postgresql-client


    # gcloud
    export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)" && \
      echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && \
      curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add - && \
      sudo apt-get update && sudo apt-get install google-cloud-sdk -y && \
      # gcloud components install kubectl && \
      gcloud config set compute/region europe-west1 && \
      gcloud config set compute/zone europe-west1-b

    # Kaggle
    chmod 600 /home/ubuntu/.secrets/secrets.yaml && \
      chmod 600 /home/ubuntu/.kaggle/kaggle.json
    
    # X11
    sudo apt-get install x11-xserver-utils -y

    # dlib
    sudo apt-get install build-essential cmake pkg-config libx11-dev libatlas-base-dev libgtk-3-dev libboost-python-dev -y

    # ansible
    sudo -E apt-add-repository -y ppa:ansible/ansible && \
      sudo apt-get update && \
      sudo apt-get -y install ansible

    config.vm.provision "ansible" do |ansible|
      ansible.verbose = "v"
      ansible.playbook = "/RUDOLF/base/util/setup/provisioner.yml"
    end

    if ! sudo grep -q "export KAGGLE_CONFIG_DIR='/home/ubuntu/.kaggle'" /etc/profile.d/myvar.sh ; then
      sudo echo "export KAGGLE_CONFIG_DIR='/home/ubuntu/.kaggle'" >> /etc/profile.d/myvar.sh
    fi

    if ! sudo grep -q "export GOOGLE_APPLICATION_CREDENTIALS='/home/ubuntu/.secrets/service_account.json'" /etc/profile.d/myvar.sh ; then
      sudo echo "export GOOGLE_APPLICATION_CREDENTIALS='/home/ubuntu/.secrets/service_account.json'" >> /etc/profile.d/myvar.sh
    fi

    if ! sudo grep -q "export VIRTUALENV_ALWAYS_COPY=1" /etc/profile.d/myvar.sh ; then
      sudo echo "export VIRTUALENV_ALWAYS_COPY=1" >> /etc/profile.d/myvar.sh
    fi

    if ! sudo grep -q "source /RUDOLF/base/dotfiles/.bashrc-shared-settings" .bashrc ; then
      sudo echo "source /RUDOLF/base/dotfiles/.bashrc-shared-settings" >> .bashrc
    fi

    if ! sudo grep -q "export CHANGE_MINIKUBE_NONE_USER=true" /etc/profile.d/myvar.sh ; then
      sudo echo "export CHANGE_MINIKUBE_NONE_USER=true" >> /etc/profile.d/myvar.sh
    fi

    if ! sudo grep -q "export MINIKUBE_WANTUPDATENOTIFICATION=false" /etc/profile.d/myvar.sh ; then
      sudo echo "export MINIKUBE_WANTUPDATENOTIFICATION=false" >> /etc/profile.d/myvar.sh
    fi

    if ! sudo grep -q "export MINIKUBE_WANTREPORTERRORPROMPT=false" /etc/profile.d/myvar.sh ; then
      sudo echo "export MINIKUBE_WANTREPORTERRORPROMPT=false" >> /etc/profile.d/myvar.sh
    fi

    if ! sudo grep -q "export MINIKUBE_HOME='/home/vagrant'" /etc/profile.d/myvar.sh ; then
      sudo echo "export MINIKUBE_HOME='/home/vagrant'" >> /etc/profile.d/myvar.sh
    fi

    if ! sudo grep -q "export KUBECONFIG='/home/vagrant/.kube/config'" /etc/profile.d/myvar.sh ; then
      sudo echo "export KUBECONFIG='/home/vagrant/.kube/config'" >> /etc/profile.d/myvar.sh
    fi

    if ! sudo grep -q "export MINIKUBE_MEMORY=26000" /etc/profile.d/myvar.sh ; then
      sudo echo "export MINIKUBE_MEMORY=26000" >> /etc/profile.d/myvar.sh
    fi

    if ! sudo grep -q "export MINIKUBE_CPU=4" /etc/profile.d/myvar.sh ; then
      sudo echo "export MINIKUBE_CPU=4" >> /etc/profile.d/myvar.sh
    fi

  SHELL
  
end